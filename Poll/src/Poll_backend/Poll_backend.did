type PollError = variant {
  EmptyOptions;
  AlreadyVoted;
  PollNotStarted;
  NotFound;
  PollEnded;
  InvalidOption;
  PollStillOngoing;
  Unauthorized;
};
type Result = variant { Ok : nat64; Err : PollError };
type Result_1 = variant {
  Ok : record { text; vec text; nat64; nat64 };
  Err : PollError;
};
type Result_2 = variant { Ok : vec record { text; int32 }; Err : PollError };
type Result_3 = variant { Ok : text; Err : PollError };
service : () -> {
  create_poll : (text, text, vec text, nat64) -> (Result);
  get_active_polls : () -> (vec nat64) query;
  get_owner : () -> (opt principal) query;
  get_poll : (nat64) -> (Result_1) query;
  get_results : (nat64) -> (Result_2) query;
  get_winner : (nat64) -> (Result_3) query;
  vote : (nat64, text) -> (Result_3);
}
